q()
1/1.1
(1/1.1)^20
(1-0.1486)/(1-0.9091)
(1-0.1486)/(1-0.9091)*50
1000/1.12^6
1/6.9^2
1/(1.069)^2
1.069^2/1.063^2-1
1.069^2/1.063-1
400*1.08^3
1/0.08-10
2.5*10000
1.08/0.08
1.08/0.08-1.1/0.1
125-100*1.1^2
400^=*(1+0.08/4)^3
400*(1+0.08/4)^3
125-100*1.05^2
14.75/1.05
0.9^50
1-0.9^50
? search
load("/Users/vinyao/Desktop/Quantitative Alpha/FINAL_DATA.RData")
length(factor_list)
dim(factor_list[[1]])
rownames(factor_list[[1]])
colnames(factor_list[[1]])
names(factor_list)
head(factor_list[[60]])
sum(factor_list[[60]])>1
sum(factor_list[[60]]>1)
sum(factor_list[[60]],na.rm = T)
sum(factor_list[[60]]>1,na.rm = T)
sum(factor_list[[60]]>2,na.rm = T)
factor_list[[60]][10,]
factor_list[[60]][1000,]
factor_list[[60]][2500,]
names(factor_list)
load("/Users/vinyao/Desktop/Quantitative Alpha/FINAL_DATA.RData")
load("/Users/vinyao/Desktop/Quantitative Alpha/FINAL_DATA.RData")
pwd
getwd()
library(xlsx)
éŒ’
a=3
load("/Users/vinyao/Desktop/Quantitative Alpha/stock_code_industry.RData")
dim(stock_code_industry)
stock_code_industry[1,]
stock_code_industry[1,2]
? load
stock_code_industry[,3]
unique(stock_code_industry[,3])
stock_code_industry[1,2]
"\xbd\xf0\xc8\xda"
is.na(NaN)
sum(is.na(stock_code_industry[,2]))
sum(is.na(stock_code_industry[,3]))
is.na(stock_code_industry[,3])
data=read.csv("~/Desktop/stock_code_industry.csv")
?read.csv
data=read.csv("~/Desktop/stock_code_industry.csv",header=F)
data=read.csv("~/Desktop/stock_code_industry.csv",header=F,fileEncoding ="utf-8")
View(data)
data=read.table("~/Desktop/stock_code_industry.csv",header=F,encoding ="utf-8")
data=read.table("~/Desktop/stock_code_industry.csv",header=F,encoding ="utf-8")
data
View(data)
unique(data[,3])
981*12
33432+16260+16260+6000
15777-10260
71952+5517*2
2700*4
71952-10800
82986-10800
60800-2700*3
? outer
x=seq(-5,5,length=100)
? contour
f<-function(x,y)
{
re=exp(-(x^2+y^2)/2)
return (re)
}
x=seq(-5,5,length=100)
y=seq(-5,5,length=100)
z=outer(x,y,f)
contour(x,y,z)
? contour
f<-function(x,y)
{
re=exp(-(x^2+y^2)/2)
return (re)
}
x=seq(-5,5,length=100)
y=seq(-5,5,length=100)
z=outer(x,y,f)
contour(x,y,z,nlevels=20)
f<-function(x,y)
{
re=exp(-(x^2+y^2)/2)
return (re)
}
x=seq(-5,5,length=100)
y=seq(-5,5,length=100)
z=outer(x,y,f)
contour(x,y,z,nlevels=50)
f<-function(x,y)
{
re=exp(-(x^2+y^2)/2)
return (re)
}
x=seq(-5,5,length=100)
y=seq(-5,5,length=100)
z=outer(x,y,f)
contour(x,y,z,nlevels=5)
plot(1:10)
R.Version()
plot(1:10)
setwd("~/Desktop/Stanford/Courses/STATS_202/hw3")
0.1^0.5
0.1^0.01
a=-6+0.05*40+3.5
1/(1+exp(-a))
library(ISLR)
names(ISLR)
library(ISLR)
names(Weekly)
library(ISLR)
summary(Weekly)
plot(Weekly)
names(Weekly)
attach(Weekly)
logit.out=glm(Direction~Lag1+lag2+Lag3+Lag4+Lag5+Volume,data=Weekly,class='binomial')
library(ISLR)
summary(Weekly)
plot(Weekly)
attach(Weekly)
logit.out=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Weekly,class='binomial')
attach(Weekly)
logit.out=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Weekly,class='binomial')
attach(Weekly)
logit.out=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Weekly,family=binomial)
summary(logit.out)
table(Direction)
logit.prob=predict(logit.out,type='response')
logit.predict=rep('Down',length(Direction))
logit.predict[logit.prob>0.5]='Up'
table(logit.predict,Direction)
430/(430+557)
48/(48+54)
Year
# Chunk 1
library(ISLR)
summary(Weekly)
plot(Weekly)
# Chunk 2
attach(Weekly)
logit.out=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Weekly,family=binomial)
summary(logit.out)
# Chunk 3
logit.prob=predict(logit.out,type='response')
logit.predict=rep('Down',length(Direction))
logit.predict[logit.prob>0.5]='Up'
table(logit.predict,Direction)
training=Weekly[Year>=1990 & Year<=2008]
test=Weekly[Year<1990 | Year>2008]
logit.out2=glm(Direction~Lag2,data=training,family=binomial)
logit.predict2=predict(logit.out2,newdata=test,type='response')
logit.prob2=rep('Down',dim(training)[1])
logit.prob2[logit.predict2>0.5]='Up'
table(logit.prob2,training$Direction)
training=Weekly[Year>=1990 & Year<=2008,]
test=Weekly[Year<1990 | Year>2008,]
logit.out2=glm(Direction~Lag2,data=training,family=binomial)
logit.predict2=predict(logit.out2,newdata=test,type='response')
logit.prob2=rep('Down',dim(training)[1])
logit.prob2[logit.predict2>0.5]='Up'
table(logit.prob2,training$Direction)
(61+471)/(61+73+380+471)
library(MASS)
lda.out=lda(Direction~Lag2,data=training)
lda.predict=predict(lda.out)
lda.predict
named(lda.predict)
names(lda.predict)
summary(lda.predict)
table(lda.predict,training$Direction)
table(lda.predict$class,training$Direction)
(22+524)/(22+20+419+524)
library(MASS)
qda.out=qda(Direction~Lag2,data=training)
qda.predict=predict(qda.out)
qda.predict=predict(qda.out)
table(qda.predict$class,training$Direction)
lda.predict=predict(lda.out,newdata=test)
table(lda.predict$class,training$Direction)
logit.out2=glm(Direction~Lag2,data=training,family=binomial)
logit.predict2=predict(logit.out2,newdata=test,type='response')
logit.prob2=rep('Down',dim(test)[1])
logit.prob2[logit.predict2>0.5]='Up'
table(logit.prob2,test$Direction)
(9+56)/(9+5+34+56))
(9+56)/(9+5+34+56)
library(MASS)
lda.out=lda(Direction~Lag2,data=training)
lda.predict=predict(lda.out,newdata=test)
table(lda.predict$class,test$Direction)
qda.out=qda(Direction~Lag2,data=training)
qda.predict=predict(qda.out)
table(qda.predict$class,training$Direction)
qda.out=qda(Direction~Lag2,data=training)
qda.predict=predict(qda.out,newdata=test)
table(qda.predict$class,test$Direction)
(61)/(61+43)
library(class)
?knn
knn.out=knn(training$Lag2,test$Lag2,training$Direction,k=1)
scale(training$Lag1)
scale(test$Lag1)
knn.out=knn(data.frame(scale(training$Lag2)),data.frame(scale(test$Lag2)),training$Direction,k=1)
names(knn.out)
knn.out
table(knn.out,test$Direction)
(14+36)/(14+25+29+36)
?MASS
null=lda(Direction~1,data=Weekly)
null=lda(Direction~.,data=Weekly)
full-lda(Direction~.*.,data=Weekly)
full=lda(Direction~.*.,data=Weekly)
full
summary(full)
full$call
full$terms
colnames(Weekly)
mydata=Weekly[,2:7]
null=lda(Direction~.,data=mydata)
full=lda(Direction~.*.,data=mydata)
full$terms
step(null,scope=list(lower=null,upper=full),direction='forward')
names(Auto)
attach(Auto)
median(mpg)
attach(Auto)
mpg01=rep(0,length(mpg))
mpg01[mpg>median(mpg)]=1
mydata=data.frame(Auto[,-mpg],mpg)
names(mydata)
mydata=data.frame(Auto[-mpg],mpg)
mydata=data.frame(Auto[-mpg],mpg)
names(mydata)
mydata=data.frame(Auto[,-1],mpg01)
names(mydata)
?boxplot
mydata$name
names(mydata)
plot(mydata)
for(i in 1:8)
{
boxplot(mydata[,i]~mpg01,ylab=names[i])
}
origin
for(i in 1:7)
{
boxplot(mydata[,i]~mpg01,ylab=names[i])
}
for(i in 1:7)
{
print i
boxplot(mydata[,i]~mpg01,ylab=names[i])
}
for(i in 1:7)
{
print (i)
boxplot(mydata[,i]~mpg01,ylab=names[i])
}
displacement
mydata[2]
mydata[,2]
cylinders
n=names(mydata)
boxplot(mydata[,1]~mpg01,ylab=n[i])
for(i in 1:7)
{
print (i)
boxplot(mydata[,i]~mpg01,ylab=names[i])
}
for(i in 1:7)
{
print (i)
boxplot(mydata[,i]~mpg01,ylab=n[i])
}
par(mfrow=c(2,4))
for(i in 1:7)
{
print (i)
boxplot(mydata[,i]~mpg01,ylab=n[i])
}
plot(mydata)
par(mfrow=c(2,4))
for(i in 1:7)
{
print (i)
boxplot(mydata[,i]~mpg01,ylab=n[i])
}
names(mydata)
summary(year)
length(year)
?Random
runif(2)
set.seed(1)
rsample=sample(1:length(mpg01))
rsample
length(rsample)
rsample=sample(1:length(mpg01),n=length(mpg01)/2)
rsample=sample(1:length(mpg01),size=length(mpg01)/2)
length(rsample)
names(training)
names(train)
train=mydata[rsample]
test=mydata[-rsample]
train=mydata[rsample,]
test=mydata[-rsample,]
names(train)
dim(train)
lda.fit=lda(mpg01~displacement+horsepower+weight+acceleration,data=train)
lda.predict=predict(lda.fit,newdata=test)
table(lda.predict,test$mpg01)
table(lda.predict$class,test$mpg01)
(7+15)/(85+7+15+89)
qda.fit=qda(mpg01~displacement+horsepower+weight+acceleration,data=train)
qda.predict=predict(qda.fit,newdata=test)
table(qda.predict$class,test$mpg01)
(7+10)/(90+7+10+89)
logit.fit=glm(mpg01~displacement+horsepower+weight+acceleration,data=train,family=binomial)
logit.prob=predict(qda.fit,newdata=test,type='response')
logit.predict=rep(0,length(test$mpg01))
logit.predict[logit.prob>0.5]=1
logit.predict
logit.prob
logit.predict=rep(0,length(test$mpg01))
logit.predict[logit.prob>0.5]=1
length(logit.prob)
test
length(test$mpg01)
logit.prob=predict(logit.fit,newdata=test,type='response')
logit.predict=rep(0,length(test$mpg01))
logit.predict[logit.prob>0.5]=1
table(logit.predict,test$mpg01)
(12+12)/(88+12+12+84)
names(train)
?knn
vec_error_rate=rep(0,15)
for k in 1:15{
knn.fit=knn(train[2:5],test[2:5],train$mpg01,k)
vec_error_rate[k]=sum(knn,fit!=test$mpg01)/length(test$mpg01)
vec_error_rate=rep(0,15)
for (k in 1:15){
knn.fit=knn(train[2:5],test[2:5],train$mpg01,k)
vec_error_rate[k]=sum(knn,fit!=test$mpg01)/length(test$mpg01)
}
vec_error_rate=rep(0,15)
for (k in 1:15){
knn.fit=knn(train[2:5],test[2:5],train$mpg01,k)
vec_error_rate[k]=sum(knn.fit!=test$mpg01)/length(test$mpg01)
}
plot(vec_error_rate,xlab='K',ylab='error rate',main='Error rate V.S. the value of K')
vec_error_rate
vec_error_rate=rep(0,15)
par(mfrow=c(1,1))
for (k in 1:15){
knn.fit=knn(train[2:5],test[2:5],train$mpg01,k)
vec_error_rate[k]=sum(knn.fit!=test$mpg01)/length(test$mpg01)
}
plot(vec_error_rate,xlab='K',ylab='error rate',main='Error rate V.S. the value of K',type='l')
table(logit.predict,Direction)
logit.prob=predict(logit.out,type='response')
logit.predict=rep('Down',length(Direction))
logit.predict[logit.prob>0.5]='Up'
table(logit.predict,Direction)
430/(430+54)
48/(48+557)
training=Weekly[Year>=1990 & Year<=2008,]
test=Weekly[Year<1990 | Year>2008,]
logit.out2=glm(Direction~Lag2,data=training,family=binomial)
logit.predict2=predict(logit.out2,newdata=test,type='response')
logit.prob2=rep('Down',dim(test)[1])
logit.prob2[logit.predict2>0.5]='Up'
table(logit.prob2,test$Direction)
(9+56)/(9+5+34+56)
library(class)
knn.out=knn(data.frame(scale(training$Lag2)),data.frame(scale(test$Lag2)),training$Direction,k=1)
table(knn.out,test$Direction)
lda.fit = lda(Direction ~ Lag2:Lag1, data = training)
lad.fit
lda.fit
names(lda.fit)
lda.fit$terms
names(training)
lda.fit = lda(Direction ~ Lag2+Lag2:Lag1, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Lag3, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Lag4, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Lag5, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Year, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Volume, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Lag5+Lag2:Lag1, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Lag1+Lag2:Lag3, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Lag1+Lag2:Volume, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Lag1+Lag2:Year, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
lda.fit = lda(Direction ~ Lag2+Lag2:Lag1+Lag2:Lag3, data = training)
lda.pred = predict(lda.fit, newdata = test)
mean(lda.pred$class == test$Direction)
vec_error_rate=rep(0,15)
par(mfrow=c(1,1))
for (k in 1:30){
knn.fit=knn(train[2:5],test[2:5],train$mpg01,k)
vec_error_rate[k]=sum(knn.fit!=test$mpg01)/length(test$mpg01)
}
plot(vec_error_rate,xlab='K',ylab='error rate',main='Error rate V.S. the value of K',type='l')
attach(Auto)
mpg01=rep(0,length(mpg))
mpg01[mpg>median(mpg)]=1
mydata=data.frame(Auto[,-1],mpg01)
vec_error_rate=rep(0,15)
par(mfrow=c(1,1))
for (k in 1:30){
knn.fit=knn(train[2:5],test[2:5],train$mpg01,k)
vec_error_rate[k]=sum(knn.fit!=test$mpg01)/length(test$mpg01)
}
plot(vec_error_rate,xlab='K',ylab='error rate',main='Error rate V.S. the value of K',type='l')
```
attach(Auto)
mpg01=rep(0,length(mpg))
mpg01[mpg>median(mpg)]=1
mydata=data.frame(Auto[,-1],mpg01)
```
(b)
```{r}
plot(mydata)
n=names(mydata)
par(mfrow=c(2,4))
for(i in 1:7)
{
boxplot(mydata[,i]~mpg01,ylab=n[i])
}
```
displacement,horsepower,weight,acceleration seems to be most useful
(c)
```{r}
set.seed(1)
rsample=sample(1:length(mpg01),size=length(mpg01)/2)
train=mydata[rsample,]
test=mydata[-rsample,]
lda.fit=lda(mpg01~displacement+horsepower+weight+acceleration,data=train)
lda.predict=predict(lda.fit,newdata=test)
table(lda.predict$class,test$mpg01)
qda.fit=qda(mpg01~displacement+horsepower+weight+acceleration,data=train)
qda.predict=predict(qda.fit,newdata=test)
table(qda.predict$class,test$mpg01)
logit.fit=glm(mpg01~displacement+horsepower+weight+acceleration,data=train,family=binomial)
logit.prob=predict(logit.fit,newdata=test,type='response')
logit.predict=rep(0,length(test$mpg01))
logit.predict[logit.prob>0.5]=1
vec_error_rate=rep(0,15)
par(mfrow=c(1,1))
for (k in 1:30){
vec_error_rate=rep(0,30)
par(mfrow=c(1,1))
for (k in 1:30){
knn.fit=knn(train[2:5],test[2:5],train$mpg01,k)
vec_error_rate[k]=sum(knn.fit!=test$mpg01)/length(test$mpg01)
}
plot(vec_error_rate,xlab='K',ylab='error rate',main='Error rate V.S. the value of K',type='l')
```
vec_error_rate=rep(0,30)
par(mfrow=c(1,1))
for (k in 1:30){
knn.fit=knn(train[2:5],test[2:5],train$mpg01,k)
vec_error_rate[k]=sum(knn.fit!=test$mpg01)/length(test$mpg01)
}
plot(vec_error_rate,xlab='K',ylab='error rate',main='Error rate V.S. the value of K',type='l')
vec_error_rate=rep(0,15)
par(mfrow=c(1,1))
for (k in 1:15){
knn.fit=knn(train[2:5],test[2:5],train$mpg01,k)
vec_error_rate[k]=sum(knn.fit!=test$mpg01)/length(test$mpg01)
}
plot(vec_error_rate,xlab='K',ylab='error rate',main='Error rate V.S. the value of K',type='l')
```
