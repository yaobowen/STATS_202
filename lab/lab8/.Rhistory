setwd("~/Desktop/Stanford/Courses/STATS_202/lab/lab8")
install.packages("tree")
library(tree)
library(ISLR)
attach(Carseats)
High=iselse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
tree.carseats=tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
install.packages("tree")
install.packages("ISLR")
install.packages("Carseats")
library(tree)
library(ISLR)
attach(Carseats)
High=iselse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
tree.carseats=tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
library(tree)
library(ISLR)
attach(Carseats)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
tree.carseats=tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
text(tree.carseats)
plot(tree.carseats)
text(tree.carseats)
table(ShelveLoc)
tree.carseats
dim(Carseats)
set.seed(2)
train=sample(1:nrows(Carseats),200)
Carseats.test=Carseats[-train,]
High.test=High[-train]
tree.carseats=trea(High~.-Sales,data=Carseats,subset=train)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
set.seed(2)
train=sample(1:nrow(Carseats),200)
Carseats.test=Carseats[-train,]
High.test=High[-train]
tree.carseats=trea(High~.-Sales,data=Carseats,subset=train)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
set.seed(2)
train=sample(1:nrow(Carseats),200)
Carseats.test=Carseats[-train,]
High.test=High[-train]
tree.carseats=tree(High~.-Sales,data=Carseats,subset=train)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
set.seed(3)
cv.carseats= cv.tree(tree.carseats,FUN=prune.misclass)
cv.carseats
plot(cv.carseats$k,cv.carseats$dev,type="b")
plot(cv.carseats$size,cv.carseats$dev,type="b")
par(mfrow=c(1,2))
plot(cv.carseats$k,cv.carseats$dev,type="b")
plot(cv.carseats$size,cv.carseats$dev,type="b")
?prune.misclass
prune.carseats=prune.misclass(tree.carseats,best=9)
plot(prune.carseats)
text(prune.carseats)
par(mfrow=c(1,1))
prune.carseats=prune.misclass(tree.carseats,best=9)
plot(prune.carseats)
text(prune.carseats)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
library(MASS)
set.seed(1)
train=sample(1:nrow(Boston),nrow(Boston)/2)
tree.boston=tree(medv~.,data=Boston,subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston)
tree.pred=predict(tree.boston,newdata=Boston[-train,])
mean((tree.pred-Boston[-train,"medv"])^2)
cv.boston=cv.tree(tree.boston)
cv.boston
install.packages("randomForest")
set.seed(1)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry=13,importance=T)
bag.boston
?randomForest
bag.boston=randomForest::randomForest(medv~.,data=Boston,subset=train,mtry=13,importance=T)
bag.boston
boston.test=Boston[-train,"medv"]
mean((tree.pred-boston.test)^2)
pred.bag=predict(bag.boston,newdata=Boston[-train,])
plot(pred.bag,boston.test)
abline(0,1)
mean((pred.bag-boston.test)^2)
library(randomForest)
set.seed(1)
bag.boston=randomForest::randomForest(medv~.,data=Boston,subset=train,mtry=6,importance=T,ntree=100)
bag.boston
pred.bag=predict(bag.boston,newdata=Boston[-train,])
plot(pred.bag,boston.test)
abline(0,1)
mean((pred.bag-boston.test)^2)
library(randomForest)
set.seed(1)
rf.boston=randomForest::randomForest(medv~.,data=Boston,subset=train,mtry=6,importance=T,ntree=100)
rf.boston
pred.bag=predict(rf.boston,newdata=Boston[-train,])
plot(pred.bag,boston.test)
abline(0,1)
mean((pred.bag-boston.test)^2)
importance(rf.boston)
varImpPlot(rf.boston)
install.packages("gbm")
library(gbm)
set.seed(1)
boost.boston=gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=5000,interaction.depth=4)
summary(boost.boston)
par(mfrow=c(1,2))
plot(boost.boston,i="rm")
plot(boost.boston,i="lstat")
pred.boost=predict(boost.boston,newdata=Boston[-train,],n.trees = 5000)
mean((pred.boost-boston.test)^2)
boost.boston=gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=5000,interaction.depth=4,shrinkage=0.2)
pred.boost=predict(boost.boston,newdata=Boston[-train,],n.trees = 5000)
mean((pred.boost-boston.test)^2)
